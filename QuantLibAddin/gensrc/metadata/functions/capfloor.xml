<Category name='capfloor'>
  <description>functions to construct and use CapFloor objects.</description>
  <displayName>Caps/Floors</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/capfloor.hpp</include>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/couponvectors.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/termstructures.hpp</include>

    <include>ql/indexes/iborindex.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/capfloor.hpp</include>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/couponvectors.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/termstructures.hpp</include>

    <include>ql/termstructures/yieldtermstructure.hpp</include>
    <include>ql/indexes/iborindex.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2006, 2007, 2008, 2011, 2014 Ferdinando Ametrano
    Copyright (C) 2005 Aurelien Chanudet
  </copyright>
  <Functions>

    <Member name='qlCapFloorType' type='QuantLib::CapFloor'>
      <description>Returns the type (e.g. Cap, Floor) for the given CapFloor object.</description>
      <libraryFunction>type</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::CapFloor::Type</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapFloorCapRates' type='QuantLib::CapFloor'>
      <description>Returns the cap rates for the given CapFloor object.</description>
      <libraryFunction>capRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapFloorFloorRates' type='QuantLib::CapFloor'>
      <description>Returns the floor rates for the given CapFloor object.</description>
      <libraryFunction>floorRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapFloorAtmRate' type='QuantLib::CapFloor'>
      <description>Returns the at-the-money rate for the given CapFloor object.</description>
      <libraryFunction>atmRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapFloorStartDate' type='QuantLib::CapFloor'>
      <description>Returns the start (i.e. first accrual) date for the given CapFloor object.</description>
      <libraryFunction>startDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapFloorMaturityDate' type='QuantLib::CapFloor'>
      <description>Returns the maturity (i.e. last payment) date for the given CapFloor object.</description>
      <libraryFunction>maturityDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapFloorImpliedVolatility' type='QuantLib::CapFloor'>
      <description>Returns the volatility implied by the given price for the given CapFloor object.</description>
      <libraryFunction>impliedVolatility</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Price' exampleValue ='0.2'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Price used to infer the implied volatility.</description>
          </Parameter>
          <Parameter name='YieldCurve' exampleValue ='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='Guess' default='0.10'>
            <type>QuantLib::Volatility</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility guess.</description>
          </Parameter>
          <Parameter name='Accuracy' default='1.0e-6'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>solver accuracy.</description>
          </Parameter>
          <Parameter name='MaxIter' default='100'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>solver max iterations.</description>
          </Parameter>
          <Parameter name='MinVol' default='1.0e-7'>
            <type>QuantLib::Volatility</type>
            <tensorRank>scalar</tensorRank>
            <description>Minimum volatility, no lower solution.</description>
          </Parameter>
          <Parameter name='MaxVol' default='4.0'>
            <type>QuantLib::Volatility</type>
            <tensorRank>scalar</tensorRank>
            <description>Maximum volatility, no higher solution.</description>
          </Parameter>
          <Parameter name='Displacement' default='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement in a displaced diffusion model.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapFloorLegAnalysis' type='QuantLibAddin::CapFloor'>
      <description>Returns the cash flow analysis for the given CapFloor object.</description>
      <libraryFunction>legAnalysis</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='AfterDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>Shows only cashflows after given date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlCapFloor'>
      <libraryFunction>CapFloor</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <processorName>InstrumentProcessor</processorName>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionType'>
            <type>QuantLib::CapFloor::Type</type>
            <tensorRank>scalar</tensorRank>
            <description>option type (cap or floor).</description>
          </Parameter>
          <Parameter name='LegID'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>coupon vector.</description>
          </Parameter>
          <Parameter name='Strikes' exampleValue = '.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>strikes.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMakeCapFloor'>
      <libraryFunction>CapFloor</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionType' exampleValue ='Cap'>
            <type>QuantLib::CapFloor::Type</type>
            <tensorRank>scalar</tensorRank>
            <description>option type (Cap or Floor).</description>
          </Parameter>
          <Parameter name='Length' exampleValue='10Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>as period (e.g. 10Y).</description>
          </Parameter>
          <Parameter name='IborIndex' exampleValue='Euribor6M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating IborIndex object ID.</description>
          </Parameter>
          <Parameter name='Strike' default='QuantLib::Null&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>strike.</description>
          </Parameter>
          <Parameter name='ForwardStart' example='"0D"'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>as period (if zero days the first caplet is removed).</description>
          </Parameter>
          <!--<Parameter name='PricingEngineID' default='boost::shared_ptr&lt;QuantLib::PricingEngine&gt;()'>-->
          <Parameter name='PricingEngineID' exampleValue='CapFloorEngineID'>
            <type>QuantLib::PricingEngine</type>
            <tensorRank>scalar</tensorRank>
            <description>CapFloor PricingEngine object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
