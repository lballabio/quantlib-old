<Category name='btp'>
  <description>functions to construct and use BTP objects.</description>
  <displayName>BTP</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/btp.hpp</include>
    <include>qlo/indexes/ibor/euribor.hpp</include>
    <include>qlo/termstructures.hpp</include>

    <include>ql/instruments/bonds/btp.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/btp.hpp</include>
    <include>qlo/indexes/ibor/euribor.hpp</include>
    <include>qlo/termstructures.hpp</include>

    <include>ql/instruments/bonds/btp.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2010, 2011 Ferdinando Ametrano
  </copyright>

  <Functions>

    <Constructor name='qlCCTEU'>
      <libraryFunction>CCTEU</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null.</description>
          </Parameter>
          <Parameter name='MaturityDate' exampleValue='45678'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>maturityDate date.</description>
          </Parameter>
          <Parameter name='Spread' exampleValue='0.80%'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>spread over Euribor6M.</description>
          </Parameter>
          <Parameter name='FwdCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Forwarding YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='StartDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>accrual first start date.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlBTP'>
      <libraryFunction>BTP</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null.</description>
          </Parameter>
          <Parameter name='MaturityDate' exampleValue='45678'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>maturityDate date.</description>
          </Parameter>
          <Parameter name='Coupon' exampleValue='0.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>simple annual compounding coupon rate.</description>
          </Parameter>
          <Parameter name='StartDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>accrual first start date.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlBTP2'>
      <description>Construct an object of class BTP and return its id, allowing for non-100 redemption.</description>
      <libraryFunction>BTP</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null.</description>
          </Parameter>
          <Parameter name='MaturityDate' exampleValue='45678'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>maturityDate date.</description>
          </Parameter>
          <Parameter name='Coupon' exampleValue='0.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>simple annual compounding coupon rate.</description>
          </Parameter>
          <Parameter name='Redemption' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption value.</description>
          </Parameter>
          <Parameter name='StartDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>accrual first start date.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRendistatoBasketSize' type='QuantLib::RendistatoBasket'>
      <description>Returns the number of BTPs in the RendistatoBasket.</description>
      <libraryFunction>size</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoBasketOutstanding' type='QuantLib::RendistatoBasket'>
      <description>Returns the overall outstanding of the BTPs in the RendistatoBasket.</description>
      <libraryFunction>outstanding</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoBasketOutstandings' type='QuantLib::RendistatoBasket'>
      <description>Returns the outstandings of the BTPs in the RendistatoBasket.</description>
      <libraryFunction>outstandings</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoBasketWeights' type='QuantLib::RendistatoBasket'>
      <description>Returns the weights of the BTPs in the RendistatoBasket.</description>
      <libraryFunction>weights</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlRendistatoBasket'>
      <libraryFunction>RendistatoBasket</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='BTPs'>
            <type>QuantLib::BTP</type>
            <tensorRank>vector</tensorRank>
            <description>BTP IDs.</description>
          </Parameter>
          <Parameter name='Outstandings'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>BTP outstanding amounts.</description>
          </Parameter>
          <Parameter name='Prices'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>vector</tensorRank>
            <description>BTP clean prices Quotes.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRendistatoCalculatorYield' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's yield.</description>
      <libraryFunction>yield</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorDuration' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's duration.</description>
      <libraryFunction>duration</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorYields' type='QuantLib::RendistatoCalculator'>
      <description>Returns the yields of the BTPs in the RendistatoCalculator's underlying basket.</description>
      <libraryFunction>yields</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorDurations' type='QuantLib::RendistatoCalculator'>
      <description>Returns the durations of the BTPs in the RendistatoCalculator's underlying basket.</description>
      <libraryFunction>durations</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorSwapLengths' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swaps' lengths.</description>
      <libraryFunction>swapLengths</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorSwapRates' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swaps' rates.</description>
      <libraryFunction>swapRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorSwapYields' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swaps' yields.</description>
      <libraryFunction>swapYields</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorSwapDurations' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swaps' durations.</description>
      <libraryFunction>swapDurations</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorEquivalentSwapRate' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swap rate.</description>
      <libraryFunction>equivalentSwapRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorEquivalentSwapYield' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swap yield.</description>
      <libraryFunction>equivalentSwapYield</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorEquivalentSwapDuration' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swap duration.</description>
      <libraryFunction>equivalentSwapDuration</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorEquivalentSwapSpread' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swap spread.</description>
      <libraryFunction>equivalentSwapSpread</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRendistatoCalculatorEquivalentSwapLength' type='QuantLib::RendistatoCalculator'>
      <description>Returns RendistatoCalculator's equivalent swap lenght in years.</description>
      <libraryFunction>equivalentSwapLength</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlRendistatoCalculator'>
      <libraryFunction>RendistatoCalculator</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RendistatoBasket'>
            <type>QuantLib::RendistatoBasket</type>
            <tensorRank>scalar</tensorRank>
            <description>RendistatoBasket object ID.</description>
          </Parameter>
          <Parameter name='Euribor'>
            <type>QuantLib::Euribor</type>
            <tensorRank>scalar</tensorRank>
            <description>Euribor index object ID.</description>
          </Parameter>
          <Parameter name='YieldCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRendistatoEquivalentSwapLengthQuote'>
      <libraryFunction>RendistatoEquivalentSwapLengthQuote</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RendistatoCalculator'>
            <type>QuantLib::RendistatoCalculator</type>
            <tensorRank>scalar</tensorRank>
            <description>RendistatoCalculator object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRendistatoEquivalentSwapSpreadQuote'>
      <libraryFunction>RendistatoEquivalentSwapSpreadQuote</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RendistatoCalculator'>
            <type>QuantLib::RendistatoCalculator</type>
            <tensorRank>scalar</tensorRank>
            <description>RendistatoCalculator object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
