<Category name='leg'>
  <description>functions to construct and use Leg objects.</description>
  <displayName>Leg</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/couponvectors.hpp</include>
    <include>qlo/capfloor.hpp</include>
    <include>qlo/swap.hpp</include>

    <include>ql/instruments/swap.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/couponvectors.hpp</include>
    <include>qlo/conundrumpricer.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/capfloor.hpp</include>
    <include>qlo/swap.hpp</include>

    <include>ql/termstructures/yieldtermstructure.hpp</include>
    <include>ql/instruments/swap.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2006, 2007, 2009, 2010, 2011 Ferdinando Ametrano
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2006, 2007 Giorgio Facchinetti
    Copyright (C) 2005 Aurelien Chanudet
  </copyright>

  <Functions>

    <!-- Leg Date functions -->

    <Procedure name='qlLegStartDate'>
      <description>Returns the start (i.e. first accrual) date for the given Leg object.</description>
      <alias>QuantLib::CashFlows::startDate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegMaturityDate'>
      <description>Returns the maturity (i.e. last payment) date for the given Leg object.</description>
      <alias>QuantLib::CashFlows::maturityDate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegIsExpired'>
      <description>Returns TRUE is the Leg is expired</description>
      <alias>QuantLib::CashFlows::isExpired</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- Leg CashFlow functions -->

    <Procedure name='qlLegPreviousCashFlowDate'>
      <description>Returns the previous cash flow date.</description>
      <alias>QuantLib::CashFlows::previousCashFlowDate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegNextCashFlowDate'>
      <description>Returns the next cash flow date.</description>
      <alias>QuantLib::CashFlows::nextCashFlowDate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegPreviousCashFlowAmount'>
      <description>Returns the previous cash flow amount.</description>
      <alias>QuantLib::CashFlows::previousCashFlowAmount</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegNextCashFlowAmount'>
      <description>Returns the next cash flow amount.</description>
      <alias>QuantLib::CashFlows::nextCashFlowAmount</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- Leg Coupon inspectors -->

    <Procedure name='qlLegPreviousCouponRate'>
      <description>Returns the previous coupon rate. Depending on (the Leg and) the given date it can be historic, deterministic or expected in a stochastic sense. When the current date is used the coupon is the last paid one.</description>
      <alias>QuantLib::CashFlows::previousCouponRate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegNextCouponRate'>
      <description>Returns the next coupon rate. Depending on (the Leg and) the given date it can be historic, deterministic or expected in a stochastic sense. When the current date is used the coupon is the already-fixed not-yet-paid one.</description>
      <alias>QuantLib::CashFlows::nextCouponRate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegNominal'>
      <description>Returns the nominal for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::nominal</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAccrualStartDate'>
      <description>Returns the accrual start date for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::accrualStartDate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAccrualEndDate'>
      <description>Returns the accrual end date for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::accrualEndDate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegReferencePeriodStart'>
      <description>Returns the reference period start date for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::referencePeriodStart</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegReferencePeriodEnd'>
      <description>Returns the reference period end date for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::referencePeriodEnd</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAccrualPeriod'>
      <description>Returns the total accrual period for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::accrualPeriod</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAccrualDays'>
      <description>Returns the total number of accrual days for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::accrualDays</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAccruedPeriod'>
      <description>Returns the accrued period for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::accrualPeriod</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAccruedDays'>
      <description>Returns the accrued days for the current coupon of the given Leg.</description>
      <alias>QuantLib::CashFlows::accrualDays</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAccruedAmount'>
      <description>Returns the accrued amount for the given Leg.</description>
      <alias>QuantLib::CashFlows::accruedAmount</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- Leg YieldTermStructure functions -->

    <Procedure name='qlLegNPV'>
      <description>Returns the net present value for the given Leg object.</description>
      <alias>QuantLib::CashFlows::npv</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegBPS'>
      <description>Returns the basis point sensitivity for the given Leg object.</description>
      <alias>QuantLib::CashFlows::bps</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegAtmRate'>
      <description>Returns the at-the-money rate for the given Leg object, i.e. the fixed rate for which an equivalent vector of fixed-rate cash flows would have the same NPV.</description>
      <alias>QuantLib::CashFlows::atmRate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
          <Parameter name='NPV' default='QuantLib::Null&lt;QuantLib::Real&gt;()'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>target net present value. If missing the NPV is calculated using the provided discount curve</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- Leg Yield functions -->

    <Procedure name='qlLegNPVFromYield'>
      <description>Returns the net present value for the given Leg object.</description>
      <alias>QuantLib::CashFlows::npv</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegBPSFromYield'>
      <description>Returns the basis point sensitivity for the given Leg object.</description>
      <alias>QuantLib::CashFlows::bps</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegYield'>
      <description>Returns the Internal rate of return for the given Leg object.</description>
      <alias>QuantLib::CashFlows::yield</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='NPV' exampleValue='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Net present (dirty) value.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Irr DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' default='"Continuous"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
          <Parameter name='Accuracy' default='1.0e-10'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance.</description>
          </Parameter>
          <Parameter name='MaxIterations' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of iterations.</description>
          </Parameter>
          <Parameter name='Guess' default='0.05'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>guess.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegDuration'>
      <description>Returns the Cash-flow duration for the given Leg object.</description>
      <alias>QuantLib::CashFlows::duration</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='DurationType' default='"Modified"'>
            <type>QuantLib::Duration::Type</type>
            <tensorRank>scalar</tensorRank>
            <description>Duration type (Simple, Macaulay, or Modified).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegConvexity'>
      <description>Returns the Cash-flow convexity for the given Leg object.</description>
      <alias>QuantLib::CashFlows::convexity</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegBasisPointValue'>
      <description>Returns the basisPointValue for the given Leg object.</description>
      <alias>QuantLib::CashFlows::basisPointValue</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegYieldValueBasisPoint'>
      <description>Returns the yieldValueBasisPoint for the given Leg object.</description>
      <alias>QuantLib::CashFlows::yieldValueBasisPoint</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- Leg Z-spread functions -->

    <Procedure name='qlLegNPVFromZSpread'>
      <description>Returns the net present value for the given Leg object.</description>
      <alias>QuantLib::CashFlows::npv</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='ZSpread' const='False' exampleValue='-0.005'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>Z-spread.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/365 (Fixed)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Not Used: DiscountCurve's DayCounter used instead.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing the current EvaluationDate is used.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlLegZSpread'>
      <description>Returns the z-spread for the given Leg object.</description>
      <alias>QuantLib::CashFlows::zSpread</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Leg object</description>
          </Parameter>
          <Parameter name='NPV' exampleValue='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Net present (dirty) value.</description>
          </Parameter>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/365 (Fixed)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Not Used: DiscountCurve's DayCounter used instead.</description>
          </Parameter>
          <Parameter name='Compounding' default='"Continuous"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>

          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>cashflows before this date are not taken into account. If missing it defaults to the current evaluation date.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>

          <Parameter name='Accuracy' default='1.0e-10'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance.</description>
          </Parameter>
          <Parameter name='MaxIterations' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of iterations.</description>
          </Parameter>
          <Parameter name='Guess' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>guess.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- QuantLibAddin::Leg interface -->

    <Member name='qlLegFlowAnalysis' type='QuantLibAddin::Leg'>
      <description>Returns the flow analysis for the given Leg object.</description>
      <libraryFunction>flowAnalysis</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='AfterDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>Shows only cashflows after given date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegSetCouponPricers' type='QuantLibAddin::Leg'>
      <description>Set the coupon pricer at the given Leg object.</description>
      <libraryFunction>setCouponPricers</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer'>
            <type>QuantLibAddin::FloatingRateCouponPricer</type>
            <tensorRank>vector</tensorRank>
            <description>FloatingRate coupon pricer object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Leg constructors -->

    <Constructor name='qlLeg'>
      <libraryFunction>Leg</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Amounts' exampleValue='1000000.0,500000.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>list of cash to be received/paid.</description>
          </Parameter>
          <Parameter name='Dates' exampleValue='40238,40330'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>payment dates corresponding to amounts.</description>
          </Parameter>
          <Parameter name='ToBeSorted' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the CashFlows must be sorted by ascending dates.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlLegFromCapFloor'>
      <libraryFunction>Leg</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CapFloor'>
            <type>QuantLib::CapFloor</type>
            <tensorRank>scalar</tensorRank>
            <description>CapFloor object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlLegFromSwap'>
      <libraryFunction>Leg</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Swap'>
            <type>QuantLib::Swap</type>
            <tensorRank>scalar</tensorRank>
            <description>Swap object ID.</description>
          </Parameter>
          <Parameter name='LegNumber' exampleValue='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Zero based leg number (e.g. use 0 for the first leg, 1 for the second leg, etc.).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMultiPhaseLeg'>
      <libraryFunction>MultiPhaseLeg</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='LegIDs'>
            <type>QuantLibAddin::Leg</type>
            <!--
            
                it would be better to have support
                for vector of underlyingClass
                
            <type>QuantLib::Leg</type>
            <supertype>underlyingClass</supertype>
          -->
            <tensorRank>vector</tensorRank>
            <description>leg object IDs, one for each phase.</description>
          </Parameter>
          <Parameter name='ToBeSorted' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the CashFlows must be sorted by ascending dates.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- InterestRate interface and constructor -->

    <Member name='qlInterestRateRate' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the rate in the given InterestRate object.</description>
      <libraryFunction>rate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateDayCounter' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the DayCounter in the given InterestRate object.</description>
      <libraryFunction>dayCounter</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::DayCounter</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateCompounding' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the Compounding in the given InterestRate object.</description>
      <libraryFunction>compounding</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Compounding</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateFrequency' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the Frequency in the given InterestRate object.</description>
      <libraryFunction>frequency</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Frequency</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateDiscountFactor' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the discount factor between two dates based on the given InterestRate object.</description>
      <libraryFunction>discountFactor</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='StartDate' exampleValue='40070'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period start.</description>
          </Parameter>
          <Parameter name='EndDate' exampleValue='40100'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period end.</description>
          </Parameter>
          <Parameter name='RefPeriodStart' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period start date needed by some daycounter.</description>
          </Parameter>
          <Parameter name='RefPeriodEnd' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period end date needed by some daycounter.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateCompoundFactor' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the compound factor between two dates based on the given InterestRate object.</description>
      <libraryFunction>compoundFactor</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='StartDate' exampleValue='40070'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period start.</description>
          </Parameter>
          <Parameter name='EndDate' exampleValue='40100'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period end.</description>
          </Parameter>
          <Parameter name='RefPeriodStart' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period start date needed by some daycounter.</description>
          </Parameter>
          <Parameter name='RefPeriodEnd' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period end date needed by some daycounter.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateEquivalentRate' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the equivalent rate for a compounding period between two dates based on the given InterestRate object.</description>
      <libraryFunction>equivalentRate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DayCounter' exampleValue='"Actual/365 (Fixed)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>rate DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' exampleValue='"Simple"' const='False'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='StartDate' exampleValue='40070'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period start.</description>
          </Parameter>
          <Parameter name='EndDate' exampleValue='40100'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period end.</description>
          </Parameter>
          <Parameter name='RefPeriodStart' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period start date needed by some daycounter.</description>
          </Parameter>
          <Parameter name='RefPeriodEnd' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period end date needed by some daycounter.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Procedure name='qlInterestRateImpliedRate'>
      <description>Returns the implied rate between two dates based on the given a compound factor.</description>
      <alias>QuantLib::InterestRate::impliedRate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Compound' exampleValue='1.01'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>compound factor used to calculate the implicit rate.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='"Actual/365 (Fixed)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>rate DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' exampleValue='"Simple"' const='False'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='StartDate' exampleValue='40070'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period start.</description>
          </Parameter>
          <Parameter name='EndDate' exampleValue='40100'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>compounding period end.</description>
          </Parameter>
          <Parameter name='RefPeriodStart' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period start date needed by some daycounter.</description>
          </Parameter>
          <Parameter name='RefPeriodEnd' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference period end date needed by some daycounter.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Constructor name='qlInterestRate'>
      <libraryFunction>InterestRate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>rate.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='"Actual/365 (Fixed)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Irr DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' exampleValue='"Simple"' const='False'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>

</Category>
