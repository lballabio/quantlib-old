<Category name='bonds'>
  <description>functions to construct and use Bond objects.</description>
  <displayName>Bonds</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/bonds.hpp</include>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/couponvectors.hpp</include>

    <include>ql/instruments/bond.hpp</include>
    <include>ql/currency.hpp</include>
    <include>ql/indexes/iborindex.hpp</include>
    <include>ql/indexes/swapindex.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/couponvectors.hpp</include>
    <include>ql/instruments/bond.hpp</include>

    <include>ql/termstructures/yieldtermstructure.hpp</include>
    <include>ql/pricingengines/bond/bondfunctions.hpp</include>
    <include>ql/currency.hpp</include>
    <include>ql/indexes/iborindex.hpp</include>
    <include>ql/indexes/swapindex.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2006, 2007 Chiara Fornarola
    Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011 Ferdinando Ametrano
    Copyright (C) 2005, 2006 Eric Ehlers
    Copyright (C) 2005 Plamen Neykov
    Copyright (C) 2005 Walter Penschke
    Copyright (C) 2009 Piter Dias
  </copyright>

  <Functions>

    <!-- QuantLib::Bond inspectors -->

    <Member name='qlBondSettlementDays' type='QuantLib::Bond'>
      <description>Returns the number of settlement days of the bond.</description>
      <libraryFunction>settlementDays</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Natural</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondCalendar' type='QuantLib::Bond'>
      <description>Returns the calendar of the bond, e.g. TARGET.</description>
      <libraryFunction>calendar</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Calendar</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondNotionals' type='QuantLib::Bond'>
      <description>Returns the notionals of the bond.</description>
      <libraryFunction>notionals</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondNotional' type='QuantLib::Bond'>
      <description>Returns the notional of the bond at a given date.</description>
      <libraryFunction>notional</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondMaturityDate' type='QuantLib::Bond'>
      <description>Returns the maturity date of the bond.</description>
      <libraryFunction>maturityDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondIssueDate' type='QuantLib::Bond'>
      <description>Returns the issue date of the bond.</description>
      <libraryFunction>issueDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondIsTradable' type='QuantLib::Bond'>
      <description>Returns TRUE if the given Bond is tradable at the given settlement date. The current bond settlement is used if no date is given.</description>
      <libraryFunction>isTradable</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondSettlementDate' type='QuantLib::Bond'>
      <description>Returns the settlement date of the bond.</description>
      <libraryFunction>settlementDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvaluationDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current global Settings::EvaluationDate is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- QuantLib::BondFunctions Date inspectors -->

    <Procedure name='qlBondStartDate'>
      <description>Returns the start (i.e. first accrual) date for the given Bond object.</description>
      <alias>QuantLib::BondFunctions::startDate</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- QuantLib::BondFunctions CashFlow inspectors -->

    <Procedure name='qlBondPreviousCashFlowDate'>
      <description>Returns the previous cash flow date.</description>
      <alias>QuantLib::BondFunctions::previousCashFlowDate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondNextCashFlowDate'>
      <description>Returns the next cash flow amount.</description>
      <alias>QuantLib::BondFunctions::nextCashFlowDate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondPreviousCashFlowAmount'>
      <description>Returns the previous cash flow amount.</description>
      <alias>QuantLib::BondFunctions::previousCashFlowAmount</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondNextCashFlowAmount'>
      <description>Returns the next cash flow date.</description>
      <alias>QuantLib::BondFunctions::nextCashFlowAmount</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- QuantLib::BondFunctions Coupon inspectors -->

    <Procedure name='qlBondPreviousCouponRate'>
      <description>Returns the previous coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the last paid one.</description>
      <alias>QuantLib::BondFunctions::previousCouponRate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondNextCouponRate'>
      <description>Returns the next coupon rate. Depending on (the Bond and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the already-fixed not-yet-paid one.</description>
      <alias>QuantLib::BondFunctions::nextCouponRate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAccrualStartDate'>
      <description>Returns the accrual start date for the current coupon of the given bond.</description>
      <alias>QuantLib::BondFunctions::accrualStartDate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAccrualEndDate'>
      <description>Returns the accrual end date for the current coupon of the given bond.</description>
      <alias>QuantLib::BondFunctions::accrualEndDate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondReferencePeriodStart'>
      <description>Returns the reference period start date for the current coupon of the given bond.</description>
      <alias>QuantLib::BondFunctions::referencePeriodStart</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondReferencePeriodEnd'>
      <description>Returns the reference period end date for the current coupon of the given bond.</description>
      <alias>QuantLib::BondFunctions::referencePeriodEnd</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAccrualPeriod'>
      <description>Returns the total accrual period for the current coupon of the given bond. The current bond settlement is used if no date is given.</description>
      <alias>QuantLib::BondFunctions::accrualPeriod</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAccrualDays'>
      <description>Returns the total number of accrual days for the current coupon of the given bond. The current bond settlement is used if no date is given.</description>
      <alias>QuantLib::BondFunctions::accrualDays</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAccruedPeriod'>
      <description>Returns the accrued period for the current coupon of the given bond. The current bond settlement is used if no date is given.</description>
      <alias>QuantLib::BondFunctions::accruedPeriod</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAccruedDays'>
      <description>Returns the accrued days for the current coupon of the given bond. The current bond settlement is used if no date is given.</description>
      <alias>QuantLib::BondFunctions::accruedDays</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAccruedAmount'>
      <description>Returns the accrued amount for the given bond. The current bond settlement is used if no date is given.</description>
      <alias>QuantLib::BondFunctions::accruedAmount</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- QuantLib::BondFunctions YieldTermStructure functions -->

    <Procedure name='qlBondCleanPriceFromYieldTermStructure'>
      <description>Returns the bond clean price implied by the given YieldTermStructure and settlement date.</description>
      <alias>QuantLib::BondFunctions::cleanPrice</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='YieldCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondBpsFromYieldTermStructure'>
      <description>Returns the basis point sensitivity implied by the given YieldTermStructure and settlement date.</description>
      <alias>QuantLib::BondFunctions::bps</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='YieldCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondAtmRateFromYieldTermStructure'>
      <description>Returns the ATM rate implied by the given YieldTermStructure, settlement date, and clean price.</description>
      <alias>QuantLib::BondFunctions::atmRate</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='YieldCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
          <Parameter name='CleanPrice' const='False' exampleValue='99.8'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>clean price.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- QuantLib::BondFunctions Yield functions -->

    <Procedure name='qlBondCleanPriceFromYield'>
      <description>Returns the bond clean price implied by the given yield and settlement date.</description>
      <alias>QuantLib::BondFunctions::cleanPrice</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='Yield' const='False' exampleValue='4.00%'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>bond yield.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondDirtyPriceFromYield'>
      <description>Returns the bond dirty price implied by the given yield and settlement date.</description>
      <alias>QuantLib::BondFunctions::dirtyPrice</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='Yield' const='False' exampleValue='4.00%'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>bond yield.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondBpsFromYield'>
      <description>Returns the basis point sensitivity implied by the given yield and settlement date.</description>
      <alias>QuantLib::BondFunctions::bps</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='Yield' const='False' exampleValue='4.00%'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>bond yield.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondYieldFromCleanPrice'>
      <description>Returns the yield for the given bond corresponding to the given clean price and settlement date.</description>
      <alias>QuantLib::BondFunctions::yield</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='CleanPrice' const='False' exampleValue='99.8'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>clean price.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
          <Parameter name='Accuracy' default='1.0e-10'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance.</description>
          </Parameter>
          <Parameter name='MaxIterations' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of iterations.</description>
          </Parameter>
          <Parameter name='Guess' default='0.05'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>guess.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondDurationFromYield'>
      <description>Returns the duration implied by the given yield and settlement date.</description>
      <alias>QuantLib::BondFunctions::duration</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='Yield' const='False' exampleValue='4.00%'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>bond yield.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='DurationType' default='"Modified"'>
            <type>QuantLib::Duration::Type</type>
            <tensorRank>scalar</tensorRank>
            <description>Duration type (Simple, Macaulay, or Modified).</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondConvexityFromYield'>
      <description>Returns the convexity implied by the given yield and settlement date.</description>
      <alias>QuantLib::BondFunctions::convexity</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='Yield' const='False' exampleValue='4.00%'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>bond yield.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- QuantLib::BondFunctions Z-spread functions -->

    <Procedure name='qlBondCleanPriceFromZSpread'>
      <description>Returns the bond clean price implied by the given Z-Spread, discount curve, and settlement date.</description>
      <alias>QuantLib::BondFunctions::cleanPrice</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='YieldCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='ZSpread' const='False' exampleValue='0.30%'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>the Z-spread.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondZSpreadFromCleanPrice'>
      <description>Returns the z-spread for the given bond corresponding to the given clean price and settlement date.</description>
      <alias>QuantLib::BondFunctions::zSpread</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObjectId'>
            <type>QuantLib::Bond</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>id of existing QuantLib::Bond object</description>
          </Parameter>
          <Parameter name='CleanPrice' const='False' exampleValue='96.8'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>clean price.</description>
          </Parameter>
          <Parameter name='YieldCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The current bond settlement date is used if no specific date is given.</description>
          </Parameter>

          <Parameter name='Accuracy' default='1.0e-10'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance.</description>
          </Parameter>
          <Parameter name='MaxIterations' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of iterations.</description>
          </Parameter>
          <Parameter name='Guess' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>guess.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- QuantLib::Bond Calculation -->
    
    <Member name='qlBondCleanPrice' type='QuantLib::Bond'>
      <description>Returns the clean price for the given bond.</description>
      <libraryFunction>cleanPrice</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- QuantLibAddin::Bond interface -->

    <Member name='qlBondDescription' type='QuantLibAddin::Bond'>
      <description>Returns the bond description string.</description>
      <libraryFunction>description</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondCurrency' type='QuantLibAddin::Bond'>
      <description>Returns the bond currency.</description>
      <libraryFunction>currency</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <!--<type>QuantLib::Currency</type>-->
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondRedemptionAmount' type='QuantLibAddin::Bond'>
      <description>Returns the redemption amount of the bond.</description>
      <libraryFunction>redemptionAmount</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondRedemptionDate' type='QuantLibAddin::Bond'>
      <description>Returns the redemption payment date of the bond.</description>
      <libraryFunction>redemptionDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondFlowAnalysis' type='QuantLibAddin::Bond'>
      <description>Returns the bond cash flow analysis.</description>
      <libraryFunction>flowAnalysis</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='AfterDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>Shows only cashflows after given date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondSetCouponPricer' type='QuantLibAddin::Bond'>
      <description>Set the coupon pricer at the given Bond object.</description>
      <libraryFunction>setCouponPricer</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer'>
            <type>QuantLib::FloatingRateCouponPricer</type>
            <tensorRank>scalar</tensorRank>
            <description>FloatingRate coupon pricer object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondSetCouponPricers' type='QuantLibAddin::Bond'>
      <description>Set the coupon pricer at the given Bond object.</description>
      <libraryFunction>setCouponPricers</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer'>
            <type>QuantLib::FloatingRateCouponPricer</type>
            <tensorRank>vector</tensorRank>
            <description>FloatingRate coupon pricer object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Bond constructors -->

    <Constructor name='qlFixedRateBond'>
      <libraryFunction>FixedRateBond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null</description>
          </Parameter>
          <Parameter name='Currency' examplevalue='EUR'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>bond Currency.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='ScheduleID'>
            <type>QuantLib::Schedule</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID.</description>
          </Parameter>
          <Parameter name='Coupons' exampleValue='0.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>simple annual compounding coupon rates.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment DayCounter ID.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='Redemption' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption value.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
          <Parameter name='PaymentCalendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>payment holiday calendar (e.g. TARGET).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlFixedRateBond2'>
      <libraryFunction>FixedRateBond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null</description>
          </Parameter>
          <Parameter name='Currency' examplevalue='EUR'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>bond Currency.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='ScheduleID'>
            <type>QuantLib::Schedule</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID.</description>
          </Parameter>
          <Parameter name='Coupons'>
            <type>QuantLib::InterestRate</type>
            <tensorRank>vector</tensorRank>
            <description>coupon InterestRate IDs.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='Redemption' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption value.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
          <Parameter name='PaymentCalendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>payment holiday calendar (e.g. TARGET).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlFloatingRateBond'>
      <libraryFunction>FloatingRateBond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null</description>
          </Parameter>
          <Parameter name='Currency'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>bond Currency.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='ScheduleID'>
            <type>QuantLib::Schedule</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID.</description>
          </Parameter>
          <Parameter name='FixingDays' default='QuantLib::Null&lt;QuantLib::Natural&gt;()'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2).</description>
          </Parameter>
          <Parameter name='IsInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment DayCounter ID.</description>
          </Parameter>
          <Parameter name='Floors' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes.</description>
          </Parameter>
          <Parameter name='Gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings.</description>
          </Parameter>
          <Parameter name='IborIndex'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating rate index.</description>
          </Parameter>
          <Parameter name='Spreads' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads.</description>
          </Parameter>
          <Parameter name='Caps' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes.</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption value.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlCmsRateBond'>
      <libraryFunction>CmsRateBond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null</description>
          </Parameter>
          <Parameter name='Currency'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>bond Currency.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='ScheduleID'>
            <type>QuantLib::Schedule</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID.</description>
          </Parameter>
          <Parameter name='FixingDays' default='QuantLib::Null&lt;QuantLib::Natural&gt;()'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2).</description>
          </Parameter>
          <Parameter name='IsInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment DayCounter ID.</description>
          </Parameter>
          <Parameter name='Floors' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes.</description>
          </Parameter>
          <Parameter name='Gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings.</description>
          </Parameter>
          <Parameter name='SwapIndex'>
            <type>QuantLib::SwapIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating swap rate index.</description>
          </Parameter>
          <Parameter name='Spreads' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads.</description>
          </Parameter>
          <Parameter name='Caps' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes.</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption value.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlZeroCouponBond'>
      <libraryFunction>ZeroCouponBond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null</description>
          </Parameter>
          <Parameter name='Currency'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>bond Currency.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET).</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='Maturity' exampleValue='45348'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption value.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlBond'>
      <libraryFunction>Bond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='std::string()'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond description string. Autogenerated if null</description>
          </Parameter>
          <Parameter name='Currency' default='"NullCurrency"'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>bond Currency.</description>
          </Parameter>
          <Parameter name='SettlementDays' default='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='Calendar' default='"NullCalendar"'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET).</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='MaturityDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
          <Parameter name='LegID'>
            <type>QuantLib::Leg</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>coupon vector Leg object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Procedure name='qlBondAlive'>
      <description>filters the Bond object IDs of the still alive Bonds.</description>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Bonds'>
            <type>QuantLibAddin::Bond</type>
            <tensorRank>vector</tensorRank>
            <description>vector of Bond IDs.</description>
          </Parameter>
          <Parameter name='RefDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference date at which evaluate alive bonds. The current evaluation date is used if no specific date is given.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLibAddin::Bond</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondMaturityLookup'>
      <description>returns the first maturity-matching Bond object ID.</description>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Bonds'>
            <type>QuantLibAddin::Bond</type>
            <tensorRank>vector</tensorRank>
            <description>vector of Bond IDs.</description>
          </Parameter>
          <Parameter name='Maturity' example='45678'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date to look up Bonds for.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLibAddin::Bond</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBondMaturitySort'>
      <description>sorts the Bond object IDs by maturity.</description>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Bonds'>
            <type>QuantLibAddin::Bond</type>
            <tensorRank>vector</tensorRank>
            <description>vector of Bond IDs.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLibAddin::Bond</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

  </Functions>
</Category>
