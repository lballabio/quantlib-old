<Category name='evolutiondescription'>
  <description>functions to construct and use evolution description related objects.</description>
  <displayName>Evolution Description</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/evolutiondescription.hpp</include>
    <include>qlo/products.hpp</include>
    <include>ql/models/marketmodels/multiproduct.hpp</include>
    <include>ql/models/marketmodels/evolutiondescription.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/evolutiondescription.hpp</include>
    <include>qlo/products.hpp</include>
    <include>ql/models/marketmodels/multiproduct.hpp</include>
    <include>ql/models/marketmodels/evolutiondescription.hpp</include>
  </addinIncludes>

  <copyright>
    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2007 Chiara Fornarola
    Copyright (C) 2006, 2007 Marco Bianchetti
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2006, 2007 Giorgio Facchinetti
  </copyright>
  <Functions>

    <!-- EvolutionDescription class costructor -->
    <Constructor name='qlEvolutionDescription'>
      <libraryFunction>EvolutionDescription</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RateTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times.</description>
          </Parameter>
          <Parameter name='EvolutionTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>evolution times in the simulation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlEvolutionDescriptionFromProduct'>
      <libraryFunction>EvolutionDescription</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Product' >
            <type>QuantLib::MarketModelMultiProduct</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of product object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- EvolutionDescription class interfaces -->
    <Member name='qlEvolutionDescriptionRateTimes' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>rates fixing times for the EvolutionDescription object.</description>
      <libraryFunction>rateTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionRateTaus' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>rate taus for the EvolutionDescription object.</description>
      <libraryFunction>rateTaus</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionEvolutionTimes' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>evolution times for the EvolutionDescription object.</description>
      <libraryFunction>evolutionTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Member name='qlEvolutionDescriptionEffectiveStopTimes' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>for each step returns a row with the effective evolution stopping time for each rate.</description>
      <libraryFunction>effectiveStopTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>-->

    <Member name='qlEvolutionDescriptionFirstAliveRate' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>first alive rate at each evolution time for the EvolutionDescription object.</description>
      <libraryFunction>firstAliveRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionNumberOfRates' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>number of rates for the EvolutionDescription object.</description>
      <libraryFunction>numberOfRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionNumberOfSteps' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>number of steps for the EvolutionDescription object.</description>
      <libraryFunction>numberOfSteps</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- EvolutionDescription object procedures -->

    <Procedure name='qlTerminalMeasure'>
      <description>Returns the terminal measure for the given EvolutionDescription object.</description>
      <alias>QuantLib::terminalMeasure</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlMoneyMarketMeasure'>
      <description>Returns the discretely compounded money market measure for the given EvolutionDescription object.</description>
      <alias>QuantLib::moneyMarketMeasure</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlMoneyMarketPlusMeasure'>
      <description>Returns the discretely compounded money market measure for the given EvolutionDescription object.</description>
      <alias>QuantLib::moneyMarketPlusMeasure</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object.</description>
          </Parameter>
          <Parameter name='Offset' default='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>offset applied to the MoneyMarket measure.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlIsInTerminalMeasure'>
      <description>Returns TRUE if the numeraire vector is Terminal measure for the given EvolutionDescription object.</description>
      <alias>QuantLib::isInTerminalMeasure</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object.</description>
          </Parameter>
          <Parameter name='Numeraires' exampleValue ='5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>vector of numeraires.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlIsInMoneyMarketMeasure'>
      <description>Returns TRUE if the numeraire vector is money market measure for the given EvolutionDescription object.</description>
      <alias>QuantLib::isInMoneyMarketMeasure</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object.</description>
          </Parameter>
          <Parameter name='Numeraires' exampleValue ='5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>vector of numeraires.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlIsInMoneyMarketPlusMeasure'>
      <description>Returns TRUE if the numeraire vector is money market measure plus for the given EvolutionDescription object.</description>
      <alias>QuantLib::isInMoneyMarketPlusMeasure</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object.</description>
          </Parameter>
          <Parameter name='Numeraires' exampleValue ='5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>vector of numeraires.</description>
          </Parameter>
          <Parameter name='Offset' default='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>offset applied to the MoneyMarket measure.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

  </Functions>
</Category>
