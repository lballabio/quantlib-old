<Category name='products'>
  <description>functions to construct and use Market Models Products objects.</description>
  <displayName>Products</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/products.hpp</include>
    <include>qlo/payoffs.hpp</include>
    <include>ql/models/marketmodels/products/onestep/onestepforwards.hpp</include>
    <include>ql/models/marketmodels/products/onestep/onestepoptionlets.hpp</include>
    <include>ql/models/marketmodels/products/multistep/multistepratchet.hpp</include>
    <include>ql/models/marketmodels/products/multiproductcomposite.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/products.hpp</include>
    <include>qlo/payoffs.hpp</include>
    <include>ql/models/marketmodels/products/onestep/onestepforwards.hpp</include>
    <include>ql/models/marketmodels/products/onestep/onestepoptionlets.hpp</include>
    <include>ql/models/marketmodels/products/multistep/multistepratchet.hpp</include>
    <include>ql/models/marketmodels/products/multiproductcomposite.hpp</include>
  </addinIncludes>

  <copyright>
    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2007 Chiara Fornarola
    Copyright (C) 2006, 2007 Marco Bianchetti
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2006, 2007 Giorgio Facchinetti
  </copyright>
  <Functions>

    <!-- MarketModelMultiProductComposite base class interface  -->

    <Constructor name='qlMarketModelMultiProductComposite'>
      <libraryFunction>MultiProductComposite</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlMarketModelMultiProductCompositeAdd' type='QuantLib::MultiProductComposite' superType='libraryClass'>
      <description>Add new product to MarketModelComposite object.</description>
      <libraryFunction>MarketModelComposite::add</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Product' >
            <type>QuantLib::MarketModelMultiProduct</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of product object.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductCompositeFinalize' type='QuantLib::MultiProductComposite' superType='libraryClass'>
      <description>finalize the MarketModelComposite object.</description>
      <libraryFunction>finalize</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>
    <!-- MarketModelMultiProduct base class interface  -->

    <Member name='qlMarketModelMultiProductSuggestedNumeraires' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>suggested Numeraires for the MarketModelMultiProduct object.</description>
      <libraryFunction>suggestedNumeraires</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductPossibleCashFlowTimes' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>possible cash flow times for the MarketModelMultiProduct object.</description>
      <libraryFunction>possibleCashFlowTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductNumberOfProducts' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>number of products in the MarketModelMultiProduct object.</description>
      <libraryFunction>numberOfProducts</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductMaxNumberOfCashFlowsPerProductPerStep' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>Max number of cashflows per product per step for the MarketModelMultiProduct object.</description>
      <libraryFunction>maxNumberOfCashFlowsPerProductPerStep</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- MarketModelMultiProduct derived classes' constructors  -->

    <Constructor name='qlMarketModelOneStepForwards'>
      <libraryFunction>OneStepForwards</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RateTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times.</description>
          </Parameter>
          <Parameter name='Accruals' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>accrual factors.</description>
          </Parameter>
          <Parameter name='PaymentTimes' exampleValue ='1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>payment times of the product.</description>
          </Parameter>
          <Parameter name='Strikes' exampleValue ='0.01,0.01,0.01,0.01,0.01'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>forward strikes.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMarketModelMultiStepRatchet'>
      <libraryFunction>MultiStepRatchet</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RateTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times.</description>
          </Parameter>
          <Parameter name='Accruals' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>accrual factors between rate fixing times.</description>
          </Parameter>
          <Parameter name='PaymentTimes' exampleValue ='1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>payment times of the product.</description>
          </Parameter>
          <Parameter name='GearingOfFloor' exampleValue ='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>gearing of floor.</description>
          </Parameter>
          <Parameter name='GearingOfFixing' exampleValue ='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>gearing of fixing.</description>
          </Parameter>
          <Parameter name='SpreadOfFloor' exampleValue ='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>spread of floor.</description>
          </Parameter>
          <Parameter name='SpreadOfFixing' exampleValue ='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>spread of fixing.</description>
          </Parameter>
          <Parameter name='InitialFloor' exampleValue ='0.01'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial floor.</description>
          </Parameter>
          <Parameter name='Payer' exampleValue ='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>payer if true.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMarketModelOneStepOptionlets'>
      <libraryFunction>OneStepOptionlets</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RateTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times.</description>
          </Parameter>
          <Parameter name='Accruals'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>accrual factors.</description>
          </Parameter>
          <Parameter name='PaymentTimes'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>payment times of the product.</description>
          </Parameter>
          <Parameter name='Payoffs'>
            <type>QuantLib::Payoff</type>
            <tensorRank>vector</tensorRank>
            <description>striked type payoff object IDs.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


  </Functions>
</Category>
