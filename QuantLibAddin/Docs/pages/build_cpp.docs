
/*
 Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at <http://quantlib.org/license.shtml>
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page build_cpp Build A QuantLibAddin C++ Environment on Windows and/or Linux

<div align="center"><small><a href="tutorials.html">back to tutorials index</a></small></div>

\section build_cpp_overview Overview

This document provides general instructions for building a %QuantLibAddin C++
environment under Windows, and on platforms which use %Autoconf e.g. Linux.

<dl>
<dt>\ref build_cpp_prerequisites</dt>
<dd><dl>
<dt>\ref build_cpp_conventions</dt>
<dt>\ref build_cpp_boost</dt>
<dt>\ref build_cpp_python</dt>
</dl></dd>
<dt>\ref build_cpp_win</dt>
<dd><dl>
<dt>\ref build_cpp_win_download</dt>
<dt>\ref build_cpp_win_build</dt>
<dt>\ref build_cpp_win_test</dt>
<dt>\ref build_cpp_win_usage</dt>
</dl></dd>
<dt>\ref build_cpp_auto</dt>
<dd><dl>
<dt>\ref build_cpp_auto_download</dt>
<dt>\ref build_cpp_auto_build</dt>
<dt>\ref build_cpp_auto_test</dt>
<dt>\ref build_cpp_auto_usage</dt>
</dl></dd>
</dl>

\section build_cpp_prerequisites 1 Prerequisites

Before proceeding to compile the source code, consult the documents below.

\subsection build_cpp_conventions 1.1 Conventions

See the following document regarding naming conventions in use for the project:
\ref conventions

\subsection build_cpp_boost 1.2 Boost

%QuantLibAddin depends on Boost.  Any recent version of Boost should be OK.  If
you're using VC9 then Boost 1.35 or later is required.  %QuantLib requires
Boost 1.39 or later.  You will need the compiled Boost libraries, the Boost
header files alone are not sufficient.

\subsection build_cpp_python 1.3 Python 2.x

Some %QuantLibAddin code is autogenerated by gensrc, which is a Python script.
Before rebuilding %QuantLibAddin you need to have Python 2.x installed on your
machine.  Here is the link to the Python website:
<a href="http://www.python.org/">http://www.python.org/</a>.

On Windows, if Python is installed on your machine so that .py files are
associated with the Python executable, then the gensrc scripts should build OK
with no modification required.

Otherwise, after you install gensrc (below), you might need to edit these
files...

\verbatim
    ObjectHandler\gensrc\Makefile.vc
    QuantLibAddin\gensrc\Makefile.vc
\endverbatim

...and set the PYTHON variable equal to the location of the Python executable
on your machine, e.g:

\verbatim
    PYTHON=C:\Python27\python.exe
\endverbatim

\section build_cpp_win 2 Windows

\subsection build_cpp_win_download 2.2 Download

\subsubsection build_cpp_win_directories 2.2.1 Directories

The Visual C++ project files for %QuantLibAddin rely on relative pathnames to
refer to the prerequisite projects %QuantLib, log4cxx, gensrc, and
ObjectHandler.  In order for this to work, these projects must reside side by
side in the directory tree, and the name of each project's parent directory
must not include the version number (e.g.  \c %QuantLib not \c QuantLib-1.6.0).

By default the installer for each project uncompresses the source code to
<tt>C:\\build_ql_1_6_0</tt> (with the exception of the zip file for %QuantLib,
where you must manually specify the target directory, removing the \c 1.6.0
suffix from the directory name).  For purposes of this tutorial we assume the
packages have been installed in this way:
\verbatim
C:\build_ql_1_6_0\gensrc
C:\build_ql_1_6_0\log4cxx
C:\build_ql_1_6_0\ObjectHandler
C:\build_ql_1_6_0\QuantLib
C:\build_ql_1_6_0\QuantLibAddin
\endverbatim

\subsubsection build_cpp_win_uncompress 2.2.2 Uncompress the Source Code

Go to the 
<a href="http://sourceforge.net/project/showfiles.php?group_id=12740">QuantLib downloads page</a>.

Download <tt>log4cxx-0.10.0g.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\log4cxx</tt>.

Download <tt>gensrc-1.6.0.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\gensrc</tt>.

Download <tt>ObjectHandler-1.6.0.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\%ObjectHandler</tt>.

Download <tt>QuantLib-1.6.0.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\%QuantLib</tt>.

Download <tt>QuantLibAddin-1.6.0.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\%QuantLibAddin</tt>.

\subsection build_cpp_win_build 2.3 Build

Open solution <tt>%QuantLibAddin\\QuantLibAddin_vc?.sln</tt>, choose
configuration <tt>Release (static runtime)</tt>, and execute menu item <tt>Build | Build
Solution</tt>.

\subsection build_cpp_win_test 2.4 Test

Open a DOS prompt in directory
\verbatim
C:\build_ql_1_6_0\QuantLibAddin\Clients\Cpp\bin
\endverbatim

Execute the example program.  The output should appear similar
to the following:
\verbatim
Begin example program.
QuantLibAddin version = 1.6.0
ObjectHandler version = 1.6.0
option PV = 3.84431
End example program.
\endverbatim

\subsection build_cpp_win_usage 2.5 Usage

\subsubsection build_cpp_win_include 2.5.1 #include

Add the following directive to your project's source file:
\verbatim
#include <qlo/qladdin.hpp>
\endverbatim

\subsubsection build_cpp_win_link 2.5.2 Link

Your project's link to the %QuantLibAddin library is established automatically
by the directive
\verbatim
#pragma comment(lib, QLADDIN_LIB_NAME)
\endverbatim
in file <tt>qlo/autolink.hpp</tt>

The name of the library depends on your compiler and configuration.
For example, if you're using VC8, configuration Release (static runtime), the library
is called
\verbatim
QuantLibAddin\lib\QuantLibObjects-vc80-mt-s-1.6.0.lib
\endverbatim

\section build_cpp_auto 3 Autoconf

\subsection build_cpp_auto_download 3.2 Download

\subsubsection build_cpp_auto_directories 3.2.1 Directories

This example assumes that you do not have root access to your machine, so that
the entire build and installation environment resides under your home
directory.

Let's say your home directory is <tt>/home/erik</tt>.  Create two
subdirectories under that, one where you will compile the code and the other
where you will install it:
\verbatim
/home/erik/build
/home/erik/install
\endverbatim

\subsubsection build_cpp_auto_uncompress 3.2.2 Uncompress the Source Code

Go to the 
<a href="http://sourceforge.net/project/showfiles.php?group_id=12740">QuantLib downloads page</a>.

Download <tt>log4cxx-0.10.0g.tar.gz</tt> and uncompress the package to
<tt>/home/erik/build/log4cxx-0.10.0g</tt>.

Download <tt>gensrc-1.6.0.tgz</tt> and uncompress the package to
<tt>/home/erik/build/gensrc-1.6.0</tt>.

Download <tt>ObjectHandler-1.6.0.tgz</tt> and uncompress the package to
<tt>/home/erik/build/%ObjectHandler-1.6.0</tt>.

Download <tt>QuantLib-1.6.0.tgz</tt> and uncompress the package to
<tt>/home/erik/build/QuantLib-1.6.0</tt>.

Download <tt>QuantLibAddin-1.6.0.tgz</tt> and uncompress the package to
<tt>/home/erik/build/QuantLibAddin-1.6.0</tt>.

\subsection build_cpp_auto_build 3.3 Build

\subsubsection build_cpp_auto_log4cxx 3.3.1 Build log4cxx

Support for log4cxx is optional.  If you do not require logging, then when you
configure ObjectHandler (see below), pass in the argument \c --without-log4cxx,
which will cause log messages to be written to stdout instead of to the log
file.  In that case you can skip ahead to the next section, \ref
build_cpp_auto_oh.  If you need logging, read on.

First you need to install apr and apr-utils.  Our copy of log4cxx includes
source code for apr and apr-utils.  In the past we used to build them with
these commands:

\verbatim
cd /home/erik/build/log4cxx-0.10.0/src/apr
./buildconf
./configure --prefix=/home/erik/install
make install
cd /home/erik/build/log4cxx-0.10.0/src/apr-util
./buildconf
./configure --prefix=/home/erik/install --with-apr=/home/erik/install
make install
\endverbatim

But those commands no longer seem to work on new linux systems.  There might be
a binary release available for your platform, on ubuntu you might try something
like this:

\verbatim
sudo apt-get install libapr1-dev libaprutil1-dev
\endverbatim

Another possibility is to go to the apache web site and download the latest
sources for apr and apr-utils.  At the time of this writing the files are
apr-1.5.1.tar.gz and apr-util-1.5.3.tar.gz.  Copy them to a temp directory,
untar them, and compile them something like this:

\verbatim
cd /home/erik/temp/apr-1.5.1
./buildconf
./configure --prefix=/home/erik/install
make install
cd /home/erik/temp/apr-util-1.5.3
./buildconf --with-apr=../apr-1.5.1
./configure --prefix=/home/erik/install --with-apr=../apr-1.5.1
make install
\endverbatim

Once you have apr and apr-utils installed, go back and build log4cxx:

\verbatim
cd /home/erik/build/log4cxx-0.10.0
./autogen.sh
./configure --prefix=/home/erik/install --with-apr=/home/erik/install \
    --with-apr-util=/home/erik/install
make install
\endverbatim

\subsubsection build_cpp_auto_oh 3.3.2 Build ObjectHandler

If you don't need logging, pass in the argument \c --without-log4cxx to
\c configure.

\verbatim
cd /home/erik/build/ObjectHandler-1.6.0
./configure --with-gensrc=/home/erik/build/gensrc-1.6.0 \
    --prefix=/home/erik/install \
    CPPFLAGS=-I/home/erik/install/include \
    LDFLAGS=-L/home/erik/install/lib
make install
\endverbatim

\subsubsection build_cpp_auto_ql 3.3.3 Build QuantLib

<table border="1" bgcolor="lightsteelblue" width=100%>
<tr>
<td>You need to apply <a href="https://github.com/eehlers/quantlib/commit/d1ff14e99b8d4c559bad0d7b3e99cd9b2fde0f84">this patch</a> to your copy of the %QuantLib source code.</td>
</tr>
</table>

\verbatim
cd /home/erik/build/QuantLib-1.6.0
./configure --prefix=/home/erik/install
make install
\endverbatim

\subsubsection build_cpp_auto_qla 3.3.4 Build QuantLibAddin

\verbatim
cd /home/erik/build/QuantLibAddin-1.6.0
./configure --prefix=/home/erik/install --enable-addin-cpp \
    --with-gensrc=/home/erik/build/gensrc-1.6.0 \
    --with-oh=/home/erik/build/ObjectHandler-1.6.0 \
    CPPFLAGS=-I/home/erik/install/include \
    LDFLAGS=-L/home/erik/install/lib
make install
\endverbatim

\subsection build_cpp_auto_test 3.4 Test

\verbatim
cd /home/erik/build/QuantLibAddin-1.6.0/Clients/Cpp
./QLADemo
\endverbatim

This should generate output similar to the following:

\verbatim
Begin example program.
QuantLibAddin version = 1.6.0
ObjectHandler version = 1.6.0
option PV = 3.84431
End example program.
\endverbatim

\subsection build_cpp_auto_usage 3.5 Usage

To incorporate %QuantLibAddin functionality into your own applications:

Suppose your application consists of source file \c yourapp.cpp:
\verbatim
#include <qlo/qladdin.hpp>
#include <iostream>

int main()
{
    std::cout << QuantLibAddin::qlAddinVersion() << std::endl;
}
\endverbatim

To compile your program, ensure that the path containing the %QuantLibAddin
header is among those searched by your compiler.  If you have followed the
build instructions above, the command would be

\verbatim
g++ -I/home/erik/install/include -c -o yourapp.o yourapp.cpp
\endverbatim

When linking your program use the -l option to tell gcc to link to the log4cxx,
ObjectHandler, %QuantLib, and %QuantLibAddin libraries, and use -L to specify
the path containing those libraries, e.g:

\verbatim
g++ -o yourapp yourapp.o -L/home/erik/install/lib \
    -llog4cxx -lObjectHandler -lQuantLib -lQuantLibAddin
\endverbatim

Finally before invoking your executable you need to ensure that your
loader knows where to find the libraries, e.g:

\verbatim
export LD_LIBRARY_PATH=/home/erik/install/lib
\endverbatim

<div align="center"><small><a href="tutorials.html">back to tutorials index</a></small></div>

*/

