
/*
 Copyright (C) 2005, 2006, 2007, 2008 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at <http://quantlib.org/license.shtml>
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*!

\page installation Installation

\section inst_overview Overview

This document describes how to install and use
%ObjectHandler on Windows and on systems which use Autoconf e.g. Linux.

%ObjectHandler logging is performed by
<a href="http://logging.apache.org/log4cxx/index.html">log4cxx</a>,
the logging framework for the Apache project.  %ObjectHandler uses a customized
copy of log4cxx version 0.10.0, called "log4cxx 0.10.0f4", amended to provide a
boost compliant build process and other minor enhancements.

Some %ObjectHandler source code is generated by the
<a href="http://www.gensrc.org">gensrc</a> utility.

%ObjectHandler, gensrc, and log4cxx 0.10.0f4 are available for download from the
<a href="http://sourceforge.net/projects/quantlib/files/ObjectHandler/">QuantLib downloads page</a>
on SourceForge.

No binary installer is provided for the standalone %ObjectHandler library.
However %ObjectHandler functionality is compiled into the binary
installation of <a href="http://www.quantlibxl.org">QuantLibXL</a>.

<dl>
<dt>\ref inst_prerequisites</dt>
<dd><dl>
<dt>\ref inst_pre_conventions</dt>
<dt>\ref inst_pre_boost</dt>
<dt>\ref inst_pre_python</dt>
</dl></dd>
<dt>\ref inst_win</dt>
<dd><dl>
<dt>\ref inst_win_download</dt>
<dt>\ref inst_win_build</dt>
<dt>\ref inst_win_test</dt>
<dt>\ref inst_win_usage</dt>
</dl></dd>
<dt>\ref inst_auto</dt>
<dd><dl>
<dt>\ref inst_auto_download</dt>
<dt>\ref inst_auto_build</dt>
<dt>\ref inst_auto_test</dt>
<dt>\ref inst_auto_usage</dt>
</dl></dd>
</dl>

\section inst_prerequisites 1 Prerequisites

Before proceeding to compile the source code, consult the documents below.

\subsection inst_pre_conventions 1.1 Conventions

See the following document regarding naming conventions in use for the project:
\ref conventions

\subsection inst_pre_boost 1.2 Boost

%ObjectHandler depends on Boost.  Any recent version of Boost should be OK.  If
you're using VC9 then Boost 1.35 or later is required.  QuantLib requires
Boost 1.39 or later.  You will need the compiled Boost libraries, the Boost
header files alone are not sufficient.

\subsection inst_pre_python 1.3 Python 2.x

Some %ObjectHandler code is autogenerated by gensrc, which is a Python script.
Before rebuilding %ObjectHandler you need to have Python 2.x installed on your
machine.  Here is the link to the Python website:
<a href="http://www.python.org/">http://www.python.org/</a>.

On Windows, if Python is installed on your machine so that .py files are
associated with the Python executable, then the gensrc scripts should build OK
with no modification required.

Otherwise, after you install gensrc (below), you might need to edit this
file...

\verbatim
    ObjectHandler\gensrc\Makefile.vc
\endverbatim

...and set the PYTHON variable equal to the location of the Python executable
on your machine, e.g:

\verbatim
    PYTHON=C:\Python27\python.exe
\endverbatim

\section inst_win 2 Windows

\subsection inst_win_download 2.1 Download

\subsubsection inst_win_directories 2.1.1 Directories

The Visual C++ project files for %ObjectHandler rely on relative pathnames
to refer to prerequisite projects gensrc and log4cxx.  In order for this
to work, these projects must reside side by side in the directory tree.

Create a new empty folder on your hard drive to serve as the root directory for
the build.  You can use any path, for purposes of this tutorial the build
directory is <tt>C:\\build_ql_1_5_0</tt>.  As described below you should copy
all of the required source code zip files to that directory and then unzip them
in place.  After all of the source code is unzipped you should have the
following directory structure:
\verbatim
C:\build_ql_1_6_0\gensrc
C:\build_ql_1_6_0\log4cxx
C:\build_ql_1_6_0\ObjectHandler
\endverbatim

\subsubsection inst_auto_uncompress 2.1.2 Uncompress the Source Code

Go to the 
<a href="http://sourceforge.net/projects/quantlib/files/ObjectHandler/">QuantLib downloads page</a>.

Download <tt>log4cxx-0.10.0f4.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\log4cxx</tt>.

Download <tt>gensrc-1.6.0.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\gensrc</tt>.

Download <tt>ObjectHandler-1.6.0.zip</tt> and uncompress the package to
<tt>C:\\build_ql_1_6_0\\%ObjectHandler</tt>.

\subsection inst_win_build 2.2 Build

%ObjectHandler is available in three configurations:

<table border="1" cellspacing="3" cellpadding="3">
<tr><td><b>Project</b></td><td><b>Description</b></td></tr>
<tr><td>ohlib</td><td>static library to be linked into standalone C++
applications</td></tr>
<tr><td>ohxllib</td><td>static library with additional functionality
for Excel, to be statically linked into a single client XLL</td></tr>
<tr><td>ohxll</td><td>a standalone XLL comprising a global
object repository which can be shared by other XLLs in the Excel
session</td></tr></table>

NB: The ohxll build of %ObjectHandler requires a DLL version of the VC runtime
library i.e. <tt>Debug</tt> or <tt>Release</tt>.

To build all available configurations and related examples - Open solution
<tt>%ObjectHandler\\ObjectHandler_vc?.sln</tt>, choose configuration
<tt>Release</tt>, and execute menu item <tt>Build | Build Solution</tt>.

\subsection inst_win_test 2.3 Test

\subsubsection inst_win_test_cpp 2.3.1 C++

Open a DOS prompt in directory 
\verbatim
C:\build_ql_1_6_0\ObjectHandler\Examples\C++\bin
\endverbatim

Execute the example program.  The output should appear similar
to the following:
\verbatim
C:\build_ql_1_6_0\ObjectHandler\Examples\C++\bin>ExampleCpp-vc80-mt-1_6_0.exe
INFO - begin example program
INFO - High level interrogation - after constructor
INFO - log dump of object with ID = account2

property = ObjectId             value = account2
property = ClassName            value = Account
property = Permanent            value = 0
property = Customer             value = customer1
property = Number               value = 987654321
property = Type                 value = Current
property = Balance              value = 100
Permanent = false


INFO - Low-level interrogation - after update
INFO - Result of getBalance on underlying = 100
INFO - Log all objects after deleting account2:
INFO - dump of all objects in ObjectHandler:

Object with ID = account1:

property = ObjectId             value = account1
property = ClassName            value = Account
property = Permanent            value = 0
property = Customer             value = customer1
property = Number               value = 123456789
property = Type                 value = Savings
property = Balance              value = Null
Permanent = false

Object with ID = customer1:

property = ObjectId             value = customer1
property = ClassName            value = Customer
property = Permanent            value = false
property = Name                 value = Joe
property = Age                  value = 40
Permanent = false


INFO - Balance of account account2 = 200
INFO - The initially time of creating account2 is
INFO - 05/14/2008 10:47:58
INFO - The last time of creating account2 is
INFO - 05/14/2008 10:47:58
INFO - relation the objects list is
INFO - customer1
INFO - End example program
\endverbatim

\subsubsection inst_win_test_static 2.3.2 XLL - Static Link

\li Start Excel
\li Load the following files:
\verbatim
ObjectHandler\Examples\xl\xll\ExampleXLLStatic-vc??-mt-1_6_0.xll
ObjectHandler\Examples\xl\exampleStatic.xls
\endverbatim
\li Hit <tt>Ctrl-Alt-F9</tt> to recalculate

\subsubsection inst_win_test_dynamic 2.3.3 XLL - Dynamic Link

\li Start Excel
\li Load the following files:
\verbatim
ObjectHandler\xll\ObjectHandler-xll-vc??-mt-1_6_0.xll
ObjectHandler\Examples\xl\xll\ExampleXLLDynamic1-vc??-mt-1_6_0.xll
ObjectHandler\Examples\xl\xll\ExampleXLLDynamic2-vc??-mt-1_6_0.xll
ObjectHandler\Examples\xl\exampleDynamic.xls
\endverbatim
\li Hit <tt>Ctrl-Alt-F9</tt> to recalculate

\subsection inst_win_usage 2.4 Usage

In order to link %ObjectHandler into your own project, use the
configuration that corresponds to your chosen build as summarized in
the tables below.  Please refer to the example application indicated.

\subsubsection inst_win_ohlib 2.4.1 ohlib

<table>
<tr>
<td><b>Project</b></td>
<td>ohlib</td>
</tr>
<tr>
<td><b>Description</b></td>
<td>Core %ObjectHandler C++ static library</td>
</tr>
<tr>
<td><b>Example Client Application</b></td>
<td>ExampleCpp</td>
</tr>
<tr>
<td><b>Preprocessor Defines</b></td>
<td>-</td>
</tr>
<tr>
<td><b>Include Directories</b></td>
<td>\$(OBJECT_HANDLER_DIR)</td>
</tr>
<tr>
<td><b>Link Directories</b></td>
<td>\$(OBJECT_HANDLER_DIR)\\lib<br>\$(LOG4CXX_DIR)\\msvc\\Lib</td>
</tr>
<tr>
<td><b>Link Libraries</b></td>
<td>ws2_32.lib</td>
</tr>
</table>

\subsubsection inst_win_ohxllib 2.4.2 ohxllib

<table>
<tr>
<td><b>Project</b></td>
<td>ohxllib</td>
</tr>
<tr>
<td><b>Description</b></td>
<td>Excel static library</td>
</tr>
<tr>
<td><b>Example Client Application</b></td>
<td>ExampleXllStatic</td>
</tr>
<tr>
<td><b>Preprocessor Defines</b></td>
<td>XLL_STATIC</td>
</tr>
<tr>
<td><b>Include Directories</b></td>
<td>\$(OBJECT_HANDLER_DIR)</td>
</tr>
<tr>
<td><b>Link Directories</b></td>
<td>\$(OBJECT_HANDLER_DIR)\\xlsdk\\lib<br>\$(OBJECT_HANDLER_DIR)\\ohxl\\ohxllib\\lib<br>\$(LOG4CXX_DIR)\\msvc\\Lib</td>
</tr>
<tr>
<td><b>Link Libraries</b></td>
<td>ws2_32.lib</td>
</tr>
</table>

\subsubsection inst_win_ohxll 2.4.3 ohxll

<table>
<tr>
<td><b>Project</b></td>
<td>ohxll</td>
</tr>
<tr>
<td><b>Description</b></td>
<td>Excel dynamic library</td>
</tr>
<tr>
<td><b>Example Client Application</b></td>
<td>ExampleXllDynamic</td>
</tr>
<tr>
<td><b>Preprocessor Defines</b></td>
<td>XLL_IMPORTS</td>
</tr>
<tr>
<td><b>Include Directories</b></td>
<td>\$(OBJECT_HANDLER_DIR)</td>
</tr>
<tr>
<td><b>Link Directories</b></td>
<td>\$(OBJECT_HANDLER_DIR)\\xlsdk\\lib<br>\$(OBJECT_HANDLER_DIR)\\ohxl\\ohxl\\xll</td>
</tr>
<tr>
<td><b>Link Libraries</b></td>
<td>-</td>
</tr>
</table>

\subsubsection inst_win_include 2.4.4 #include

In all cases you need to add the following directive to your project's
source file:
\verbatim
#include <oh/objecthandler.hpp>
\endverbatim

\subsubsection inst_win_link 2.4.5 Link

Your project's link to the %ObjectHandler library is established
automatically by the directive
\verbatim
#pragma comment(lib, OBJHANDLER_LIB_NAME)
\endverbatim
in file <tt>oh/autolink.hpp</tt>

The name of the library depends on your compiler and configuration.
For example, if you're using VC8, configuration Release (static runtime), the library
is called
\verbatim
ObjectHandler-vc80-mt-s-1_6_0.lib
\endverbatim

The location of the library depends on which project you're using
(ohlib/ohxllib/ohxll), please consult the tables above.

\section inst_auto 3 Autoconf

\subsection inst_auto_download 3.1 Download

\subsubsection inst_auto_directories 3.1.1 Directories

This example assumes that you do not have root access to your machine, so that
the entire build and installation environment resides under your home
directory.

Let's say your home directory is <tt>/home/erik</tt>.  Create two
subdirectories under that, one where you will compile the code and the other
where you will install it:
\verbatim
/home/erik/build
/home/erik/install
\endverbatim

\subsubsection inst_auto_uncompress 3.1.2 Uncompress the Source Code

Go to the 
<a href="http://sourceforge.net/project/showfiles.php?group_id=12740">QuantLib downloads page</a>.

Download <tt>log4cxx-0.10.0f4.tar.gz</tt> and uncompress the package to
<tt>/home/erik/build/log4cxx-0.10.0</tt>.

Download <tt>gensrc-1.6.0.tgz</tt> and uncompress the package to
<tt>/home/erik/build/gensrc-1.6.0</tt>.

Download <tt>ObjectHandler-1.6.0.tgz</tt> and uncompress the package to
<tt>/home/erik/build/%ObjectHandler-1.6.0</tt>.

\subsection inst_auto_build 3.2 Build

\subsubsection inst_auto_log4cxx 3.2.1 Build log4cxx

Support for log4cxx is optional.  If you do not require logging, then when you
configure ObjectHandler (see below), pass in the argument \c --without-log4cxx,
which will cause log messages to be written to stdout instead of to the log
file.  In that case you can skip ahead to the next section, \ref inst_auto_oh.
If you need logging, read on.

First you need to install apr and apr-utils.  Our copy of log4cxx includes
source code for apr and apr-utils.  In the past we used to build them with
these commands:

\verbatim
cd /home/erik/build/log4cxx-0.10.0/src/apr
./buildconf
./configure --prefix=/home/erik/install
make install
cd /home/erik/build/log4cxx-0.10.0/src/apr-util
./buildconf
./configure --prefix=/home/erik/install --with-apr=/home/erik/install
make install
\endverbatim

But those commands no longer seem to work on new linux systems.  There might be
a binary release available for your platform, on ubuntu you might try something
like this:

\verbatim
sudo apt-get install libapr1-dev libaprutil1-dev
\endverbatim

Another possibility is to go to the apache web site and download the latest
sources for apr and apr-utils.  At the time of this writing the files are
apr-1.5.1.tar.gz and apr-util-1.5.3.tar.gz.  Copy them to a temp directory,
untar them, and compile them something like this:

\verbatim
cd /home/erik/temp/apr-1.5.1
./buildconf
./configure --prefix=/home/erik/install
make install
cd /home/erik/temp/apr-util-1.5.3
./buildconf --with-apr=../apr-1.5.1
./configure --prefix=/home/erik/install --with-apr=../apr-1.5.1
make install
\endverbatim

Once you have apr and apr-utils installed, go back and build log4cxx:

\verbatim
cd /home/erik/build/log4cxx-0.10.0
./autogen.sh
./configure --prefix=/home/erik/install --with-apr=/home/erik/install \
    --with-apr-util=/home/erik/install
make install
\endverbatim

\subsubsection inst_auto_oh 3.2.2 Build ObjectHandler

If you don't need logging, pass in the argument \c --without-log4cxx to
\c configure.

\verbatim
cd /home/erik/build/ObjectHandler-1.6.0
./configure --with-gensrc=/home/erik/build/gensrc-1.6.0 \
    --prefix=/home/erik/install \
    CPPFLAGS=-I/home/erik/install/include \
    LDFLAGS=-L/home/erik/install/lib
make install
\endverbatim

\subsection inst_auto_test 3.3 Test

\verbatim
cd /home/erik/build/ObjectHandler-1.6.0/Examples/C++
./ExampleCpp
\endverbatim

This should generate output similar to the following:

\verbatim
[erik@client2 C++]$ ./ExampleCpp 
INFO - begin example program
INFO - High level interrogation - after constructor
INFO - log dump of object with ID = account2

property = Balance              value = 100                 
property = ClassName            value = Account             
property = Customer             value = customer1           
property = Number               value = 987654321           
property = ObjectId             value = account2            
property = Permanent            value = 0                   
property = Type                 value = Current             
Permanent = false               


INFO - Low-level interrogation - after update
INFO - Result of getBalance on underlying = 100
INFO - Log all objects after deleting account2:
INFO - dump of all objects in ObjectHandler:

Object with ID = account1:

property = Balance              value = [Null value]        
property = ClassName            value = Account             
property = Customer             value = customer1           
property = Number               value = 123456789           
property = ObjectId             value = account1            
property = Permanent            value = 0                   
property = Type                 value = Savings             
Permanent = false               

Object with ID = customer1:

property = Age                  value = 40                  
property = ClassName            value = Customer            
property = Name                 value = Joe                 
property = ObjectId             value = customer1           
property = Permanent            value = false               
Permanent = false               


INFO - Balance of account account2 = 200
INFO - The initially time of creating account2 is 
INFO - 08/28/2008 15:54:18
INFO - The last time of creating account2 is 
INFO - 08/28/2008 15:54:18
INFO - relation the objects list is 
INFO - customer1
INFO - End example program
\endverbatim

\subsection inst_auto_usage 3.4 Usage

To incorporate %ObjectHandler functionality into your own applications:

The header you need is
\verbatim
#include <oh/objecthandler.hpp>
\endverbatim

To compile your program, ensure that the path containing the %ObjectHandler
header is among those searched by your compiler.  If you have followed the
build instructions above, the command would be

\verbatim
g++ -I/home/erik/install/include -c -o yourapp.o yourapp.cpp
\endverbatim

When linking your program use the -l option to tell gcc to link to the
log4cxx and %ObjectHandler libraries, and use -L to specify the path
containing those libraries, e.g:

\verbatim
g++ -o yourapp yourapp.o -L/home/erik/install/lib \
    -lObjectHandler -llog4cxx
\endverbatim

Finally before invoking your executable you need to ensure that your
loader knows where to find the log4cxx and %ObjectHandler libraries, e.g:

\verbatim
export LD_LIBRARY_PATH=/home/erik/install/lib
\endverbatim

*/

